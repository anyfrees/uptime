# .github/workflows/build-electron-app.yml

name: Build Electron App

# 控制工作流程何时运行
on:
  push:
    branches: [ main ] # 当 main 分支有推送时触发
  pull_request:
    branches: [ main ] # 当向 main 分支发起 pull request 时触发 (可选)
  release:
    types: [created]    # 当在 GitHub 上创建新的 Release 时触发

jobs:
  build:
    # 使用矩阵策略为多个平台构建
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest] # 构建平台
        # 可选：指定 Node.js 版本
        # node-version: [18.x, 20.x] 

    runs-on: ${{ matrix.os }} # 在指定的操作系统上运行

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 检出您的代码仓库

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x # 或者您项目中使用的 Node.js 版本

    - name: Install dependencies (npm)
      run: npm install
      # 如果您使用 yarn，请替换为:
      # run: yarn install --frozen-lockfile

    - name: Install Windows build tools (Windows only)
      if: matrix.os == 'windows-latest'
      run: npm install --global windows-build-tools --vs2019 # 有时需要，特别是涉及原生模块时

    # 构建应用程序
    # electron-builder 会根据当前运行的操作系统 (matrix.os) 和 package.json 中的配置来构建相应的包
    - name: Build application
      run: npm run dist # 这个脚本应在 package.json 中定义为 "electron-builder"
      # 或者更明确地指定平台:
      # if: matrix.os == 'windows-latest'
      #   run: npm run dist:win # 假设您在 package.json 中定义了 "dist:win": "electron-builder --win"
      # if: matrix.os == 'macos-latest'
      #   run: npm run dist:mac   # 假设 "dist:mac": "electron-builder --mac"
      # if: matrix.os == 'ubuntu-latest'
      #   run: npm run dist:linux # 假设 "dist:linux": "electron-builder --linux"
      env:
        # GitHub Actions 提供的用于发布到 GitHub Releases 的 token
        # 仅在 on: release: types: [created] 事件触发时，electron-builder 才会尝试发布
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # 如果您的构建或发布需要其他环境变量，可以在这里设置

    # 上传构建产物 (可选, 如果不直接发布到 Release)
    # 这会将构建好的文件作为 workflow artifact 上传，方便下载和测试
    - name: Upload Windows Artifact
      if: matrix.os == 'windows-latest' && success() # 仅在构建成功时上传
      uses: actions/upload-artifact@v4
      with:
        name: proactive-monitor-windows-${{ github.sha }} # 产物名称
        path: dist/*.exe # Windows 安装程序路径 (根据您的 productName 和 NSIS 配置)
        # path: dist/*.zip # 如果您也构建了 zip 包

    - name: Upload macOS Artifact
      if: matrix.os == 'macos-latest' && success()
      uses: actions/upload-artifact@v4
      with:
        name: proactive-monitor-macos-${{ github.sha }}
        path: dist/*.dmg # macOS DMG 文件路径
        # path: dist/*.zip

    - name: Upload Linux Artifact
      if: matrix.os == 'ubuntu-latest' && success()
      uses: actions/upload-artifact@v4
      with:
        name: proactive-monitor-linux-${{ github.sha }}
        path: dist/*.AppImage # Linux AppImage 路径
        # path: dist/*.deb
        # path: dist/*.rpm
        # path: dist/*.tar.gz
