# .github/workflows/build-and-publish.yml

name: Build and Publish 拨测客户端

on:
  push:
    branches: [ main ] # 每次推送到 main 分支时构建，并上传为 artifact
  release:
    types: [published] # 当在 GitHub 上发布新的 Release 时触发构建并上传到 Release Assets

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x 

    - name: Install dependencies (npm)
      run: npm ci 

    # 构建应用程序
    # electron-builder 会在 on:release 事件时自动尝试发布到 GitHub Releases
    - name: Build application
      id: build_app # 给这个步骤一个 id，方便后续引用其输出
      run: npm run dist # 这个脚本应在 package.json 中定义为 "electron-builder"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # 如果需要代码签名，在这里配置 CSC_LINK 和 CSC_KEY_PASSWORD
        # CSC_LINK: ${{ secrets.CSC_LINK }}
        # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

    # 上传构建产物 (Workflow Artifacts) - 总是执行，用于测试或存档
    - name: Upload Windows Artifact (Installer)
      if: matrix.os == 'windows-latest' && success()
      uses: actions/upload-artifact@v4
      with:
        name: 主动可用性拨测平台客户端-Windows-Installer-${{ github.sha }}
        path: dist/*Setup*.exe # 匹配 NSIS 安装程序

    - name: Upload Windows Artifact (Portable)
      if: matrix.os == 'windows-latest' && success() && steps.build_app.outputs.artifactName && contains(steps.build_app.outputs.artifactName, 'portable') # 假设 portable 会有特定文件名或输出
      uses: actions/upload-artifact@v4
      with:
        name: 主动可用性拨测平台客户端-Windows-Portable-${{ github.sha }}
        path: dist/*portable*.exe # 或更精确的 portable 文件名

    - name: Upload macOS Artifact (DMG)
      if: matrix.os == 'macos-latest' && success()
      uses: actions/upload-artifact@v4
      with:
        name: 主动可用性拨测平台客户端-macOS-${{ github.sha }}
        path: dist/*.dmg

    - name: Upload macOS Artifact (ZIP)
      if: matrix.os == 'macos-latest' && success() && steps.build_app.outputs.artifactName && contains(steps.build_app.outputs.artifactName, '.zip')
      uses: actions/upload-artifact@v4
      with:
        name: 主动可用性拨测平台客户端-macOS-zip-${{ github.sha }}
        path: dist/*.zip

    - name: Upload Linux Artifact (AppImage)
      if: matrix.os == 'ubuntu-latest' && success()
      uses: actions/upload-artifact@v4
      with:
        name: 主动可用性拨测平台客户端-Linux-AppImage-${{ github.sha }}
        path: dist/*.AppImage

    - name: Upload Linux Artifact (deb)
      if: matrix.os == 'ubuntu-latest' && success() && steps.build_app.outputs.artifactName && contains(steps.build_app.outputs.artifactName, '.deb')
      uses: actions/upload-artifact@v4
      with:
        name: 主动可用性拨测平台客户端-Linux-deb-${{ github.sha }}
        path: dist/*.deb
        
    - name: Upload Linux Artifact (rpm)
      if: matrix.os == 'ubuntu-latest' && success() && steps.build_app.outputs.artifactName && contains(steps.build_app.outputs.artifactName, '.rpm')
      uses: actions/upload-artifact@v4
      with:
        name: 主动可用性拨测平台客户端-Linux-rpm-${{ github.sha }}
        path: dist/*.rpm